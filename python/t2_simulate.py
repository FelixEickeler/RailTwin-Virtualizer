#  31.01.2023 ----------------------------------------------------------------------------------------------------------------------#  created by: Felix Eickeler#              felix.eickeler@tum.de       # ----------------------------------------------------------------------------------------------------------------------------------import osfrom pathlib import Path, PurePathfrom python.common.docker_helpers import docker_run, create_dockerdef common_path(paths):    arr = os.path.commonprefix([p.parts for p in map(PurePath, paths)])    return Path(os.path.join(*arr))class Simulate:    _steps = ["setup", "simulate", "post_eval"]    def __init__(self, _project):        self.project = _project        ipath = self.project.simulation_input.expanduser()        if ipath.exists():            if not ipath.is_dir():                raise "Not directory path was provided."            self.input_path = ipath  # [p.parent for p in ipath.glob("**/*.obj") if p.with_suffix(".mtl").exists() and p.with_suffix(".csv").exists()]        if not self.input_path:            self.project.logger.critical("No valid simulation path were provided. Make sure that obj, mtl and csv have same stem name.")        opath = self.project.simulation_output        if not opath:            self.output_path = self.input_path  # [p for p in sim_paths]        else:            if not opath.exists():                opath.mkdir(parents=True)            elif not opath.is_dir():                raise NotADirectoryError("No directory path was provided.")            self.output_path = opath    def run(self):        if self.project.step == "all_steps":            steps = Simulate._steps        else:            steps = [self.project.step]        if create_docker(self.input_path, self.output_path, "helios").returncode != 0:            raise RuntimeError("Docker could not be created !")        if "setup" in steps:            self.project.logger.info("Setting up helios files")            docker_run_simulation("pre", input_path=self.input_path)        if "simulate" in steps:            self.project.logger.info("Starting simulation")            docker_run_simulation("run", input_path=self.input_path)        if "post_eval" in steps:            self.project.logger.info("Agglomerating simulation aka. post_processing")            docker_run_simulation("post", input_path=self.input_path, outpath=self.output_path, combine_n=0, final=True)    @staticmethod    def add_parser_options(subparser):        pmo_parser = subparser.add_parser("simulate")        pmo_parser.add_argument('--in', type=Path, dest="simulation_input", help="Folder with preprocessed models.", required=True)        pmo_parser.add_argument('--out', type=Path, dest="simulation_output", help="Output path. Default will create folders inside the given structure of --in", default=None)        pmo_parser.add_argument('--step', choices=Simulate._steps + ["all_steps"], help=f'[{",".join(Simulate._steps)}]',                                required=False, dest="secondary")def docker_run_simulation(cmd, input_path, combine_n=50, final=False, outpath=False):    """    StringBuilder for docker run.    :param cmd:    :param input_path:    :param combine_n:    :param final:    :param outpath:    :return:    """    dstring = ["docker-compose", "exec", "-T", "-u", "phaethon", "helios", "python3", "/home/phaethon/scripts/run_simulation.py",               "--input_path", "/home/phaethon/data",               "--combine_n", str(combine_n),               "--task", cmd]    if outpath:        dstring += ["--output_path", "/home/phaethon/results"]    if final:        dstring.append("--final")    docker_run(dstring)